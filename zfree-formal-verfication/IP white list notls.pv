(******************************************************************)

free c: channel.

(* Asymmetric key encryption *)
fun pk(bitstring): bitstring.
fun aenc(bitstring, bitstring): bitstring.
reduc forall m: bitstring, sk: bitstring; adec(aenc(m,pk(sk)),sk) = m.

(******************************************************************)
(* Queries: authentication *) 
event end(bitstring, bitstring, bitstring, bitstring).
event begin(bitstring, bitstring, bitstring, bitstring).
query a: bitstring, b: bitstring, c: bitstring, d: bitstring; 
  event(end(a, b, c, d)) ==> event(begin(a, b, c, d)).
  
  
  (* Query1: secrecy *) 
free AppData: bitstring [private].
query attacker(AppData). 

(* Queries2: verify integrity of response data *)
event endResponseVerif(bitstring).
event beginResponseVerif(bitstring).

query response_data: bitstring;
  event(endResponseVerif(response_data)) ==> event(beginResponseVerif(response_data)).

(* Queries3: authentication server identity *)
event endServerVerif(bitstring).
event beginServerVerif(bitstring).

query server_certificate: bitstring;
  inj-event(endServerVerif(server_certificate)) ==> inj-event(beginServerVerif(server_certificate)).

(******************************************************************)
(* client process *)

let processClient(pkSA: bitstring, pkSB: bitstring) =
	in (IP_client: bitstring, IP_destination: bitstring);

	new data: bitstring;
	out(c, (IP_client, IP_destination, data));

	in(c, ResponsePacket: bitstring);
	let (Sequence_Number: bitstring, ACE_Number: bitstring, Destination_Port: bitstring, IP_ServerA: bitstring) = adec(ResponsePacket, pkSA) in

	let sharedPacket = aenc((Sequence_Number, ACE_Number, Destination_Port,  IP_ServerA), pkSB) in 
	out(c, sharedPacket);


	0.

(******************************************************************)
(* normal server process *)

let processServerA(pkSA: bitstring) = 
	

	in(c, (IP_client: bitstring, IP_destination: bitstring));
	let IP_ServerA = IP_destination in

	new Sequence_Number: bitstring;
	new ACE_Number: bitstring;
	new Destination_Port: bitstring;

	let ResponsePacket = aenc((Sequence_Number, ACE_Number, Destination_Port, IP_ServerA), pkSA) in

	out(c, ResponsePacket);

	event begin(Sequence_Number, ACE_Number, Destination_Port, IP_ServerA);
	0.

(******************************************************************)
(* abnormal server process *)

let processServerB(pkSB: bitstring) =

	in(c, sharedPacket: bitstring);
	let (Sequence_Number: bitstring, ACE_Number: bitstring, Destination_Port: bitstring, IP_ServerA: bitstring) = adec(sharedPacket, pkSB) in

	event end(Sequence_Number, ACE_Number, Destination_Port, IP_ServerA);
	0.
(******************************************************************)
(* Main process *)

process
	
	new skSA: bitstring;
	let pkSA = pk(skSA) in

	new skSB: bitstring;
	let pkSB = pk(skSB) in

	((!processClient(pkSA, pkSB)) |
	 (!processServerA(pkSA)) |
	 (!processServerB(pkSB))
	)



(******************************************************************)
(* end of file *)