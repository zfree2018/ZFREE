

free c: channel.    (* control plane channel *)
free d: channel.    (* data plane channel *)


(* null_c, empty_c: const. *)
const null_c: bitstring [data].
const empty_c: bitstring [data].

(* ServerConfiguration: const. *)
const early_data_type_c: bitstring [data].

(* HMAC: const. *)
const hmac_opad_c: bitstring [data].
const hmac_ipad_c: bitstring [data].

(* HKDF: const. *)
const hkdf_zeros_c: bitstring [data]. 
(* HKDF: label *)
const HKDF_SERVER_FINISHED_c: bitstring [data].
const HKDF_CLIENT_FINISHED_c: bitstring [data].
const HKDF_LABAL_EXPANDED_STATIC_SECRET_c: bitstring [data].
const HKDF_LABEL_EXPANDED_EPHEMERAL_SECRET_c: bitstring [data].
const HKDF_LABEL_FINISHED_SECRET_c: bitstring [data].
const HKDF_LABEL_TRAFFIC_SECRET_c: bitstring [data].
(*
const HKDF_LABEL_RESUMPTION_MASTER_SECRET_c: bitstring [data].
const HKDF_LABEL_EXPORTER_MASTER_SECRET_c: bitstring [data].
*)
(* HKDF: const. - label (Phase) *)
(*
const HKDF_LABEL_EARLY_HANDSHAKE_KEY_EXPANSION_c: bitstring [data].
const HKDF_LABEL_EARLY_APPLICATION_DATA_KEY_EXPANSION_c: bitstring [data].
*)
const HKDF_LABEL_HANDSHAKE_KEY_EXPANSION_c: bitstring [data].
const HKDF_LABEL_APPLICATION_DATA_KEY_EXPANSION_c: bitstring [data].
(* HKDF: const. - label (Purpose) *)
const HKDF_LABEL_CLIENT_WRITE_KEY_c: bitstring [data].
const HKDF_LABEL_SERVER_WRITE_KEY_c: bitstring [data].
const HKDF_LABEL_CLIENT_WRITE_IV_c: bitstring [data].
const HKDF_LABEL_SERVER_WRITE_IV_c: bitstring [data].
(* HKDF: const. - length *)
const hkdf_length_mss_c: bitstring [data].
const hkdf_length_mes_c: bitstring [data].
const hkdf_length_client_finished_key_c: bitstring [data].
const hkdf_length_server_finished_key_c: bitstring [data].
(* HKDF: const. - length (Handshake) *)
const hkdf_length_handshake_client_write_key_c: bitstring [data].
const hkdf_length_handshake_server_write_key_c: bitstring [data].
const hkdf_length_handshake_client_write_IV_c: bitstring [data].
const hkdf_length_handshake_server_write_IV_c: bitstring [data].
(* HKDF: const. - length (Application) *)
const hkdf_length_application_client_write_key_c: bitstring [data].
const hkdf_length_application_server_write_key_c: bitstring [data].
const hkdf_length_application_client_write_IV_c: bitstring [data].
const hkdf_length_application_server_write_IV_c: bitstring [data].
const hkdf_length_traffic_secret_c: bitstring [data].

(* AEAD: const. *)
const client_seq_num_c: bitstring  [data].
const server_seq_num_c: bitstring  [data].
const record_type_c: bitstring  [data].
const record_version_c: bitstring  [data].

(* Host Information *)
free HostInfoC_c, HostInfoS_c, HostInfoCA_c: bitstring.



(******************************************************************)
(*for dataplane*)
(* Null, Empty: const. *)
const null: bitstring [data].
const empty: bitstring [data].

(* ServerConfiguration: const. *)
const early_data_type: bitstring [data].

(* HMAC: const. *)
const hmac_opad: bitstring [data].
const hmac_ipad: bitstring [data].

(* HKDF: const. *)
const hkdf_zeros: bitstring [data]. 
(* HKDF: label *)
const HKDF_SERVER_FINISHED: bitstring [data].
const HKDF_CLIENT_FINISHED: bitstring [data].
const HKDF_LABAL_EXPANDED_STATIC_SECRET: bitstring [data].
const HKDF_LABEL_EXPANDED_EPHEMERAL_SECRET: bitstring [data].
const HKDF_LABEL_FINISHED_SECRET: bitstring [data].
const HKDF_LABEL_TRAFFIC_SECRET: bitstring [data].
(*
const HKDF_LABEL_RESUMPTION_MASTER_SECRET: bitstring [data].
const HKDF_LABEL_EXPORTER_MASTER_SECRET: bitstring [data].
*)
(* HKDF: const. - label (Phase) *)
(*
const HKDF_LABEL_EARLY_HANDSHAKE_KEY_EXPANSION: bitstring [data].
const HKDF_LABEL_EARLY_APPLICATION_DATA_KEY_EXPANSION: bitstring [data].
*)
const HKDF_LABEL_HANDSHAKE_KEY_EXPANSION: bitstring [data].
const HKDF_LABEL_APPLICATION_DATA_KEY_EXPANSION: bitstring [data].
(* HKDF: const. - label (Purpose) *)
const HKDF_LABEL_CLIENT_WRITE_KEY: bitstring [data].
const HKDF_LABEL_SERVER_WRITE_KEY: bitstring [data].
const HKDF_LABEL_CLIENT_WRITE_IV: bitstring [data].
const HKDF_LABEL_SERVER_WRITE_IV: bitstring [data].
(* HKDF: const. - length *)
const hkdf_length_mss: bitstring [data].
const hkdf_length_mes: bitstring [data].
const hkdf_length_client_finished_key: bitstring [data].
const hkdf_length_server_finished_key: bitstring [data].
(* HKDF: const. - length (Handshake) *)
const hkdf_length_handshake_client_write_key: bitstring [data].
const hkdf_length_handshake_server_write_key: bitstring [data].
const hkdf_length_handshake_client_write_IV: bitstring [data].
const hkdf_length_handshake_server_write_IV: bitstring [data].
(* HKDF: const. - length (Application) *)
const hkdf_length_application_client_write_key: bitstring [data].
const hkdf_length_application_server_write_key: bitstring [data].
const hkdf_length_application_client_write_IV: bitstring [data].
const hkdf_length_application_server_write_IV: bitstring [data].
const hkdf_length_traffic_secret: bitstring [data].

(* AEAD: const. *)
const client_seq_num: bitstring  [data].
const server_seq_num: bitstring  [data].
const record_type: bitstring  [data].
const record_version: bitstring  [data].

(* Host Information *)
free HostInfoC, HostInfoS, HostInfoCA: bitstring.



(******************************************************************)
(* Hash *)
fun H(bitstring): bitstring.

(* HMAC *)
reduc forall key: bitstring, text: bitstring; 
      HMAC(key, text) = H(( (key, hmac_opad_c), H(((key, hmac_ipad_c), text)) )).

(* HKDF *)
reduc forall salt: bitstring, IKM: bitstring;
      HKDF_Extract(salt, IKM) = H(( (salt, hmac_opad_c), H(((salt, hmac_ipad_c), IKM)) )). (* HKDF-extract *)

reduc forall PRK: bitstring, info: bitstring, L: bitstring;
      HKDF_Expand(PRK, info, L) = H(( (PRK, hmac_opad_c), H(((PRK, hmac_ipad_c), (info, L))) )). (* HKDF-expand *)

(* Signature *)
fun sign(bitstring, bitstring): bitstring.
fun pk(bitstring): bitstring.
  reduc forall x: bitstring, sk: bitstring; verify(sign(x, sk), x, pk(sk)) = true.

(* Diffie-Hellman *)
const g: bitstring.
fun exp(bitstring, bitstring): bitstring. (* exp(g,x) = g^x *)
  equation forall x: bitstring, y: bitstring; exp(exp(g, x), y) = exp(exp(g, y), x). (* (g^x)^y = (g^y)^x *)

(* XOR *)
const zeros: bitstring. (* 00..0 *)
fun xor(bitstring,bitstring):bitstring.
  equation forall x:bitstring,y:bitstring; xor(xor(x,y),y) = x.
  equation forall x:bitstring; xor(x,x) = zeros.  (* xor(x,x) = 00..0 *)
  equation forall x:bitstring; xor(zeros,x) = x.  (* xor(00..0,x) = x *)
  equation forall x:bitstring; xor(x,zeros) = x.  (* xor(x,00..0) = x *)

(* AEAD: Authenticated Encryption with Associated Data *)
(* Encryption scheme *)
fun encrypt(bitstring, bitstring, bitstring): bitstring.
  reduc forall x:bitstring, k:bitstring, r:bitstring; decrypt(encrypt(x,k,r),k,r) = x.
(* MAC *)
fun mac(bitstring, bitstring): bitstring.
  reduc forall x: bitstring, k: bitstring; verify_mac(mac(x, k), x, k) = true.
(* Encrypt-then-MAC (generic composition)[R02] *)
(* [R02] P.Rogaway, "Authenticated-encryption with associated-data,"
   ACM Conference on Computer and Communications Security (CCS'02), 
   pp.98-107, ACM press, 2002 *)
reduc forall k: bitstring, n: bitstring, p:bitstring, ad:bitstring; 
  AEAD_Encrypt(k, n, p, ad) = (encrypt(p, k, n), mac((n, ad, encrypt(p, k, n)), k)).
reduc forall k: bitstring, n: bitstring, p:bitstring, ad:bitstring; 
  AEAD_Decrypt(k, n, (encrypt(p, k, n), mac((n, ad, encrypt(p, k, n)), k)), ad) = p.

(* increment function *)
fun inc(bitstring): bitstring.


(******************************************************************)
(* Queries: secrecy *) 

(* 1. the attacker try to get data from dataplane *)
(* 2. the attacker try to get data from controlplane *)


free data_c: bitstring [private].  (* control plane *)
free ZeroRating_Data1: bitstring.
free ZeroRating_Data2: bitstring.
free ZeroRating_Data3: bitstring.
free ZeroRating_Data4: bitstring.
query attacker(data_c).


(* Queries: secrecy *) 
free AppDataClient: bitstring [private].
query attacker(AppDataClient). 


(* Queries2.1: authentication CP server identity *)
event endServerVerif(bitstring).
event beginServerVerif(bitstring).

query server_identity: bitstring;
inj-event(endServerVerif(server_identity)) ==> inj-event(beginServerVerif(server_identity)).


(* Queries2.2: authentication: verify the SA and the ISP assistant *) 
event endClient(bitstring, bitstring, bitstring, bitstring, bitstring).
event beginClient(bitstring, bitstring, bitstring, bitstring, bitstring).
query s: bitstring, t: bitstring, u: bitstring, v: bitstring, w: bitstring; 
inj-event(endClient(s,t,u,v,w)) ==> inj-event(beginClient(s,t,u,v,w)).



(* Queries3.1: verify integrity of the Control Plane (ZFree command). e.g. ISP Assistant  <--hashpush-- SA *)
event endintegrityVerif_c(bitstring).
event begintegrityVerif_c(bitstring).

query response_data: bitstring;
event(endintegrityVerif_c(response_data)) ==> event(begintegrityVerif_c(response_data)).


(* Queries3.2: verify integrity of the data Plane (Packet datapath). e.g. client  <--data-- CP server *)
event endResponseVerif_d(bitstring,bitstring,bitstring,bitstring).
event beginResponseVerif_d(bitstring,bitstring,bitstring,bitstring).

query response_data1: bitstring, response_data2: bitstring, response_data3: bitstring, response_data4: bitstring;
event(endResponseVerif_d(response_data1, response_data2, response_data3, response_data4)) ==> event(beginResponseVerif_d(response_data1, response_data2, response_data3, response_data4)).



(******************************************************************)
(* ISP assistant process *)

(*** in here, the client is the ISP assistant ***)


(***  Step 0 TLS Setup ***)

let processISP(pkCA: bitstring)=
    (* Setup *)
      in(c, (client_version_c: bitstring, client_cipher_suites_c: bitstring, 
             legacy_compression_methods_c: bitstring));

    (* ClientHello + key_share *)
      new client_random: bitstring;
      new client_legacy_session_id: bitstring;
      new X: bitstring; 
      let client_key_shares_c = exp(g, X) in  (* g^X *)
      let client_hello_c = (client_version_c, client_random, client_legacy_session_id, 
                          client_cipher_suites_c, legacy_compression_methods_c, 
                          client_key_shares_c) in
    (* Client output *)
      out(c, client_hello_c);

    (* Client input *)
      in(c, (server_hello_c: bitstring, enc_encrypted_extensions_c: bitstring, 
             enc_server_configuration_c: bitstring, enc_server_certificate_c: bitstring, 
             enc_server_certificate_verify_c: bitstring, enc_server_finished_c: bitstring));
      let (server_version: bitstring, server_random: bitstring, 
           server_cipher_suite: bitstring, server_key_share: bitstring) = server_hello_c in 

      if server_version = client_version_c &&
         server_cipher_suite = client_cipher_suites_c then 

    (* SS, ES, xSS, xES *) (* Full handshake: SS = ES *)
      let static_secret = exp(server_key_share, X) in     (* SS: (g^{Y})^X = g^{XY} *)
      let ephemeral_secret = exp(server_key_share, X) in  (* ES: (g^{Y})^X = g^{XY} *)
      let xss = HKDF_Extract(hkdf_zeros_c, static_secret) in
      let xes = HKDF_Extract(hkdf_zeros_c, ephemeral_secret) in

    (* Handshake traffic keys: client_write_key, server_write_key, 
                               client_write_iv, server_write_iv *)
      let handshake_context_c = H((client_hello_c, server_hello_c)) in

      let handshake_client_write_key_c = HKDF_Expand(
      	      xes, 
	      ((HKDF_LABEL_HANDSHAKE_KEY_EXPANSION_c, HKDF_LABEL_CLIENT_WRITE_KEY_c), handshake_context_c), 
	      hkdf_length_handshake_client_write_key_c) in

      let handshake_server_write_key = HKDF_Expand(
      	      xes, 
	      ((HKDF_LABEL_HANDSHAKE_KEY_EXPANSION_c, HKDF_LABEL_SERVER_WRITE_KEY_c), handshake_context_c), 
	      hkdf_length_handshake_server_write_key_c) in

      let handshake_client_write_iv = HKDF_Expand(
      	      xes, 
	      ((HKDF_LABEL_HANDSHAKE_KEY_EXPANSION_c, HKDF_LABEL_CLIENT_WRITE_IV_c), handshake_context_c), 
	      hkdf_length_handshake_client_write_IV_c) in

      let handshake_server_write_iv = HKDF_Expand(
      	      xes, 
	      ((HKDF_LABEL_HANDSHAKE_KEY_EXPANSION_c, HKDF_LABEL_SERVER_WRITE_IV_c), handshake_context_c), 
	      hkdf_length_handshake_server_write_IV_c) in

    (* Decryption: encrypted_extensions, server_configuration, server_certificate_c, 
                   server_certificate_verify_c, server_finished_c *)
      (* AEAD: additional_data = empty_c *)
      let handshake_server_write_nonce_0 = xor(handshake_server_write_iv, 
                                               server_seq_num_c) in
      let (encrypted_extensions:bitstring, =record_type_c) = AEAD_Decrypt(
      	      handshake_server_write_key, 
      	      handshake_server_write_nonce_0, 
	      enc_encrypted_extensions_c, 
	      empty_c) in 

      let handshake_server_write_nonce_1 = xor(handshake_server_write_iv, 
                                               inc(server_seq_num_c)) in
      let (server_configuration:bitstring, =record_type_c) = AEAD_Decrypt(
      	      handshake_server_write_key, 
      	      handshake_server_write_nonce_1, 
	      enc_server_configuration_c, 
	      empty_c) in 

      let handshake_server_write_nonce_2 = xor(handshake_server_write_iv, 
                                               inc(inc(server_seq_num_c))) in
      let (server_certificate_c:bitstring, =record_type_c) = AEAD_Decrypt(
      	      handshake_server_write_key, 
      	      handshake_server_write_nonce_2, 
	      enc_server_certificate_c, 
	      empty_c) in 

      let handshake_server_write_nonce_3 = xor(handshake_server_write_iv, 
                                               inc(inc(inc(server_seq_num_c)))) in
      let (server_certificate_verify_c:bitstring, =record_type_c) = AEAD_Decrypt(
      	      handshake_server_write_key, 
	      handshake_server_write_nonce_3, 
	      enc_server_certificate_verify_c, 
	      empty_c) in 

      let handshake_server_write_nonce_4 = xor(handshake_server_write_iv, 
                                               inc(inc(inc(inc(server_seq_num_c))))) in
      let (server_finished_c:bitstring, =record_type_c) = AEAD_Decrypt(
      	      handshake_server_write_key, 
	      handshake_server_write_nonce_4, 
	      enc_server_finished_c, 
	      empty_c) in 

      if encrypted_extensions = empty_c then 

      let (=HostInfoCA_c, =HostInfoS_c, pkS: bitstring, signCA_pkS: bitstring) = server_certificate_c in 
      if verify(signCA_pkS, H((HostInfoCA_c, HostInfoS_c, pkS)), pkCA) = true then 

      let handshake_hashed_data = H((client_hello_c, server_hello_c, encrypted_extensions, 
                                     server_configuration, server_certificate_c)) in 
      if verify(server_certificate_verify_c, handshake_hashed_data, pkS) = true then 

    (* mSS, mES, master_secret, traffic_secret_0 *) 
      let handshake_hash = H((client_hello_c, server_hello_c, encrypted_extensions,
                              server_configuration, server_certificate_c, 
                              server_certificate_verify_c)) in
      let mss = HKDF_Expand(
      	      xss, 
	      (HKDF_LABAL_EXPANDED_STATIC_SECRET_c, handshake_hash), 
	      hkdf_length_mss_c) in
      let mes = HKDF_Expand(
      	      xes, 
	      (HKDF_LABEL_EXPANDED_EPHEMERAL_SECRET_c, handshake_hash), 
	      hkdf_length_mes_c) in
      let master_secret = HKDF_Extract(mss, mes) in 
      let traffic_secret_0 = HKDF_Expand(
      	      master_secret, 
	      (HKDF_LABEL_TRAFFIC_SECRET_c, handshake_hash), 
	      hkdf_length_traffic_secret_c) in

      let server_finished_handshake_context = H((client_hello_c, server_hello_c, encrypted_extensions,
                                                 server_configuration, server_certificate_c, 
                                                 server_certificate_verify_c)) in
      let server_finished_key_c = HKDF_Expand(
      	      master_secret, 
	      (HKDF_SERVER_FINISHED_c, empty_c), 
	      hkdf_length_server_finished_key_c) in
      if server_finished_c = HMAC(server_finished_key_c, server_finished_handshake_context) then

    (* Certificate: optional *)
      (* Omitted *)
    (* CertificateVerify: optional *)
      (* Omitted *)

    (* Finished *) (* 1-RTT (Client) *)
      let client_finished_handshake_context_c = H((client_hello_c, server_hello_c, encrypted_extensions,
                                                 server_configuration, server_certificate_c, 
                                                 server_certificate_verify_c, server_finished_c)) in
      let client_finished_key_c = HKDF_Expand(
      	      master_secret, 
	      (HKDF_CLIENT_FINISHED_c, empty_c), 
	      hkdf_length_client_finished_key_c) in
      let client_finished_c = HMAC(client_finished_key_c, client_finished_handshake_context_c) in

    (* Encryption: client_finished_c *)
      let handshake_client_write_nonce_0_c = xor(handshake_client_write_iv, 
                                               client_seq_num_c) in
      let enc_client_finished_c = AEAD_Encrypt(
      	      handshake_client_write_key_c, 
	      handshake_client_write_nonce_0_c, 
	      (client_finished_c, record_type_c), 
	      empty_c) in  

    (* Client output *)
      out(c, enc_client_finished_c);



    (** ZFree ISP assistant **)
    (** Setup **)
    in(c, (isp_Policy: bitstring, isp_OptionListLength: bitstring, isp_OptionList: bitstring));


    (**  Step 1 ZFree HandShake ISP side **)

    let ZFree_HELLO_ISP = (isp_Policy, isp_OptionListLength, isp_OptionList) in 

    (**      ZFree_Hello output            **)
    (** ISP assistant  1---->  Server Agent **)
    out(c, ZFree_HELLO_ISP);


    (**      ZFree_Hello input             **)
    (** ISP assistant  <----1  Server Agent **)
    in(c, ZFree_HELLO_Server_Agent: bitstring);
    

    let (cp_Policy: bitstring, cp_OptionListLength: bitstring, cp_OptionList: bitstring) = ZFree_HELLO_Server_Agent in

    (**      check Policy version match           **)
    if isp_Policy = cp_Policy &&
        isp_OptionListLength = cp_OptionListLength &&
        isp_OptionList = cp_OptionList then






    (** Step 2 ZFree Connect ISP side  **)
    new HashType: bitstring;
    new ParseType: bitstring;
    new connectionType: bitstring;

    new AddressListLength: bitstring;
    new AddressList: bitstring;

    let ZFree_CONNECT = (HashType, ParseType, connectionType, isp_Policy, AddressListLength,  AddressList) in 
    
    (** ISP Connect Out **)
    (***  ISP Assistant   2----->   Server Agent ***)
    out(c, ZFree_CONNECT);
    
    (** ISP Connect ACK input **)
    (***  ISP Assistant   <-----2   Server Agent ***)
    in(c, ZFree_ACK: bitstring);









    (***  Step 4 ZFree DataPlane Interaction ISP side  ***)
    (*** sniff packet from data plane ***)
    in(d, ZeroRating_Data1_c: bitstring);
    in(d, ZeroRating_Data2_c: bitstring);
    in(d, ZeroRating_Data3_c: bitstring);
    in(d, ZeroRating_Data4_c: bitstring);






    (***  create Key hash ***)

    let khash1_ISP = HMAC(client_finished_key_c, ZeroRating_Data1_c) in
    let khash2_ISP = HMAC(client_finished_key_c, ZeroRating_Data2_c) in
    let khash3_ISP = HMAC(client_finished_key_c, ZeroRating_Data3_c) in
    let khash4_ISP = HMAC(client_finished_key_c, ZeroRating_Data4_c) in


    (*  show the hash compare *)
    in(c, Hash_Push_otherside: bitstring);

    (* quary ISP side 2.1 Event end: authentication *)(*Update: check if need to add more parameter*)
    event endClient(client_random, server_random, client_cipher_suites_c, xes, traffic_secret_0);




    let (HashValueLength: bitstring, HashValue: bitstring, timeStamp: bitstring) = Hash_Push_otherside in
    




    let (khash1_CP: bitstring, khash2_CP: bitstring, khash3_CP: bitstring, khash4_CP: bitstring) = HashValue in

    if khash1_ISP= khash1_CP && khash2_ISP= khash2_CP && khash3_ISP= khash3_CP && khash1_ISP= khash1_CP then

    (*verify event*)

(*query 3.1 verification the cp integrity——*)
event endintegrityVerif_c(ZeroRating_Data1_c);
event endintegrityVerif_c(khash1_ISP);
event endintegrityVerif_c(HashValue);


    (* after ISP check, pass the packets *)
    out(d, ZeroRating_Data1_c);
    out(d, ZeroRating_Data2_c);
    out(d, ZeroRating_Data3_c);
    out(d, ZeroRating_Data4_c);
    0.




    (* Application data traffic keys: client_write_key, server_write_key, 
                                      client_write_iv, server_write_iv *)
      

(******************************************************************)
(* Server Agent process *)

(*** in here, the Server is the Server Agent ***)


let processSA(skS: bitstring, pkS: bitstring, server_certificate_c: bitstring, pkCA: bitstring) =
    (* Setup *)
      in(c, (server_version: bitstring, server_cipher_suite: bitstring));

    (* Server input *)
      in(c, client_hello_c: bitstring);
      let (client_version_c: bitstring, client_random: bitstring, client_legacy_session_id: bitstring,
           client_cipher_suites_c: bitstring, legacy_compression_methods_c: bitstring, 
           client_key_shares_c: bitstring) = client_hello_c in

      if client_version_c = server_version &&
         client_cipher_suites_c = server_cipher_suite &&
         legacy_compression_methods_c = null_c then 

    (* ServerHello + key_share *)
      new server_random: bitstring;
      new Y: bitstring;
      let server_key_share = exp(g, Y) in  (* g^Y *)
      let server_hello_c = (server_version, server_random, server_cipher_suite, server_key_share) in 

    (* SS, ES, xSS, xES *) (* Full handshake: SS = ES *)
      let static_secret = exp(client_key_shares_c, Y) in     (* SS: (g^{X})^Y = g^{XY} *)
      let ephemeral_secret = exp(client_key_shares_c, Y) in  (* ES: (g^{X})^Y = g^{XY} *)
      let xss = HKDF_Extract(hkdf_zeros_c, static_secret) in
      let xes = HKDF_Extract(hkdf_zeros_c, ephemeral_secret) in

    (* Handshake traffic keys: client_write_key, server_write_key, 
                               client_write_iv, server_write_iv *)
      let handshake_context_c = H((client_hello_c, server_hello_c)) in

      let handshake_client_write_key_c = HKDF_Expand(
      	      xes, 
	      ((HKDF_LABEL_HANDSHAKE_KEY_EXPANSION_c, HKDF_LABEL_CLIENT_WRITE_KEY_c), handshake_context_c), 
	      hkdf_length_handshake_client_write_key_c) in

      let handshake_server_write_key = HKDF_Expand(
      	      xes, 
	      ((HKDF_LABEL_HANDSHAKE_KEY_EXPANSION_c, HKDF_LABEL_SERVER_WRITE_KEY_c), handshake_context_c), 
	      hkdf_length_handshake_server_write_key_c) in

      let handshake_client_write_iv = HKDF_Expand(
      	      xes, 
	      ((HKDF_LABEL_HANDSHAKE_KEY_EXPANSION_c, HKDF_LABEL_CLIENT_WRITE_IV_c), handshake_context_c), 
	      hkdf_length_handshake_client_write_IV_c) in

      let handshake_server_write_iv = HKDF_Expand(
      	      xes, 
	      ((HKDF_LABEL_HANDSHAKE_KEY_EXPANSION_c, HKDF_LABEL_SERVER_WRITE_IV_c), handshake_context_c), 
	      hkdf_length_handshake_server_write_IV_c) in

    (* EncryptedExtensions *)
      let encrypted_extensions = empty_c in 

    (* CertificateRequest: optional *)
      (* Omitted *)

    (* ServerConfiguration: optional *) 
      new configuration_id: bitstring;
      new expiration_date: bitstring;
      let static_key_share = server_key_share in 
      let server_configuration = (configuration_id, expiration_date, static_key_share, 
                                  early_data_type_c) in 

    (* Certificate: optional *)
      (* Main process *)

    (* CertificateVerify: optional *)
      let handshake_hashed_data = H((client_hello_c, server_hello_c, encrypted_extensions,
                                     server_configuration, server_certificate_c)) in 
      let server_certificate_verify_c = sign(handshake_hashed_data, skS) in 

    (* mSS, mES, master_secret, traffic_secret_0 *) 
      let handshake_hash = H((client_hello_c, server_hello_c, encrypted_extensions,
                              server_configuration, server_certificate_c, 
                              server_certificate_verify_c)) in
      let mss = HKDF_Expand(
      	      xss, 
	      (HKDF_LABAL_EXPANDED_STATIC_SECRET_c, handshake_hash), 
	      hkdf_length_mss_c) in
      let mes = HKDF_Expand(
      	      xes, 
	      (HKDF_LABEL_EXPANDED_EPHEMERAL_SECRET_c, handshake_hash), 
	      hkdf_length_mes_c) in
      let master_secret = HKDF_Extract(mss, mes) in 
      let traffic_secret_0 = HKDF_Expand(
      	      master_secret, 
	      (HKDF_LABEL_TRAFFIC_SECRET_c, handshake_hash), 
	      hkdf_length_traffic_secret_c) in

    (* Finished *) (* 1-RTT (Server) *)
      let server_finished_handshake_context = H((client_hello_c, server_hello_c, encrypted_extensions,
                                                 server_configuration, server_certificate_c, 
                                                 server_certificate_verify_c)) in
      let server_finished_key_c = HKDF_Expand(
      	      master_secret, 
	      (HKDF_SERVER_FINISHED_c, empty_c), 
	      hkdf_length_server_finished_key_c) in
      let server_finished_c = HMAC(server_finished_key_c, server_finished_handshake_context) in

    (* Encryption: encrypted_extensions, server_configuration, server_certificate_c, 
                   server_certificate_verify_c, server_finished_c *)
      (* AEAD: additional_data = empty_c *)
      let handshake_server_write_nonce_0 = xor(handshake_server_write_iv, 
                                               server_seq_num_c) in
      let enc_encrypted_extensions_c = AEAD_Encrypt(
      	      handshake_server_write_key, 
      	      handshake_server_write_nonce_0, 
	      (encrypted_extensions, record_type_c), 
	      empty_c) in 

      let handshake_server_write_nonce_1 = xor(handshake_server_write_iv, 
                                               inc(server_seq_num_c)) in
      let enc_server_configuration_c = AEAD_Encrypt(
      	      handshake_server_write_key, 
      	      handshake_server_write_nonce_1, 
	      (server_configuration, record_type_c), 
	      empty_c) in 

      let handshake_server_write_nonce_2 = xor(handshake_server_write_iv, 
                                               inc(inc(server_seq_num_c))) in
      let enc_server_certificate_c = AEAD_Encrypt(
      	      handshake_server_write_key, 
      	      handshake_server_write_nonce_2, 
	      (server_certificate_c, record_type_c), 
	      empty_c) in 

      let handshake_server_write_nonce_3 = xor(handshake_server_write_iv, 
                                               inc(inc(inc(server_seq_num_c)))) in
      let enc_server_certificate_verify_c = AEAD_Encrypt(
      	      handshake_server_write_key, 
	      handshake_server_write_nonce_3, 
	      (server_certificate_verify_c, record_type_c), 
	      empty_c) in 

      let handshake_server_write_nonce_4 = xor(handshake_server_write_iv, 
                                               inc(inc(inc(inc(server_seq_num_c))))) in
      let enc_server_finished_c = AEAD_Encrypt(
      	      handshake_server_write_key, 
	      handshake_server_write_nonce_4, 
	      (server_finished_c, record_type_c), 
	      empty_c) in 

    
    
    (* quary SA side 2.1 Event begin: authentication   2.1 SA side *)
      event beginClient(client_random, server_random, server_cipher_suite, xes, traffic_secret_0);


(*  !!!read this carefully again to make sure no change!!!!!!! *)
    (* Server output *)
      out(c, (server_hello_c, enc_encrypted_extensions_c, enc_server_configuration_c, 
              enc_server_certificate_c, enc_server_certificate_verify_c, enc_server_finished_c));

    (* Server input *)
      in(c, enc_client_finished_c: bitstring);

    (* Decryption: client_finished_c *)
      let handshake_client_write_nonce_0_c = xor(handshake_client_write_iv, 
                                               client_seq_num_c) in
      let (client_finished_c:bitstring, =record_type_c) = AEAD_Decrypt(
      	      handshake_client_write_key_c, 
	      handshake_client_write_nonce_0_c, 
	      enc_client_finished_c, 
	      empty_c) in 

      let client_finished_handshake_context_c = H((client_hello_c, server_hello_c, encrypted_extensions,
                                                 server_configuration, server_certificate_c, 
                                                 server_certificate_verify_c, server_finished_c)) in
      let client_finished_key_c = HKDF_Expand(
      	      master_secret, 
	      (HKDF_CLIENT_FINISHED_c, empty_c), 
	      hkdf_length_client_finished_key_c) in
      if client_finished_c = HMAC(client_finished_key_c, client_finished_handshake_context_c) then





    (*** Above is to get the correct HMAC ***)






    (*** Setup ***)
    in(c, (cp_Policy: bitstring, cp_OptionListLength: bitstring, cp_OptionList: bitstring));

    (*** Step 1 ZFree HandSake Server Agent side ***)

    (***  ZFree_Hello input ***)
    (*** ISP Assistant   1----->   Server Agent ***)
    in(c, ZFree_HELLO_ISP: bitstring);
    
    let (isp_Policy: bitstring, isp_OptionListLength: bitstring, isp_OptionList: bitstring) = ZFree_HELLO_ISP in
    
    (***      check version match              ***)
    if cp_Policy = isp_Policy &&
            cp_OptionListLength = isp_OptionListLength &&
            cp_OptionList = isp_OptionList then

    let ZFree_HELLO_Server_Agent = (cp_Policy, cp_OptionListLength, cp_OptionList) in

    (*** ZFree_Hello output ***)
    (*** ISP Assistant   <-----1   Server Agent ***)
    out(c, ZFree_HELLO_Server_Agent);




    (***  Step 2 ZFree Connect Server Agent side  ***)
    (***  ZFree Connect Input     ***)
    (***  ISP Assistant   2----->   Server Agent ***)
    in(c, ZFree_CONNECT: bitstring);
    let (HashType_sa: bitstring, ParseType_sa: bitstring, connectionType_sa: bitstring, isp_Policy_sa: bitstring, AddressListLength_sa: bitstring, AddressList_sa: bitstring) = ZFree_CONNECT in
    
    (*** ZFree Connect ACK in ***)
    new ZFree_ACK:bitstring;
    (*** ISP Assistant   <-----2   Server Agent ***)
    out(c, ZFree_ACK);






    (***  Step 4 ZFree DataPlane Interaction Server Agent side  ***)
    (*** sniff packet from data plane ***)




    in(d, ZeroRating_Data1_c: bitstring);
    let khash1 = HMAC(server_finished_key_c, ZeroRating_Data1_c) in
    out(d, ZeroRating_Data1_c);

    in(d, ZeroRating_Data2_c: bitstring);
    let khash2 = HMAC(server_finished_key_c, ZeroRating_Data2_c) in
    out(d, ZeroRating_Data2_c);


    in(d, ZeroRating_Data3_c: bitstring);
    let khash3 = HMAC(server_finished_key_c, ZeroRating_Data3_c) in
    out(d, ZeroRating_Data3_c);


    in(d, ZeroRating_Data4_c: bitstring);
    let khash4 = HMAC(server_finished_key_c, ZeroRating_Data4_c) in
    out(d, ZeroRating_Data4_c);
    

    (***  create Key hash ***)
    new key: bitstring;

    

    new HashValueLength: bitstring;
    let HashValue = (khash1, khash2, khash3, khash4) in
    new timeStamp: bitstring;

    let Hash_Push = (HashValueLength, HashValue, timeStamp) in

     (*** ISP Assistant   <-----3   Server Agent ***)
    (*** ZFree send khash ****)
    out(c, Hash_Push);
        

    (*query 3.1 verification the cp integrity*)

    event begintegrityVerif_c(ZeroRating_Data1_c);
    event begintegrityVerif_c(khash1);
    event begintegrityVerif_c(HashValue);

    0.


(******************************************************************)
(******       CP Server process      ******)




(* Server process *)

let processServer(skS: bitstring, pkS: bitstring, server_certificate: bitstring, pkCA: bitstring)=
    (* Setup *)
      in(d, (server_version: bitstring, server_cipher_suite: bitstring));

    (* Server input *)
      in(d, client_hello: bitstring);
      let (client_version: bitstring, client_random: bitstring, client_legacy_session_id: bitstring,
           client_cipher_suites: bitstring, legacy_compression_methods: bitstring, 
           client_key_shares: bitstring) = client_hello in

      if client_version = server_version &&
         client_cipher_suites = server_cipher_suite &&
         legacy_compression_methods = null then 

    (* ServerHello + key_share *)
      new server_random: bitstring;
      new Y: bitstring;
      let server_key_share = exp(g, Y) in  (* g^Y *)
      let server_hello = (server_version, server_random, server_cipher_suite, server_key_share) in 

    (* SS, ES, xSS, xES *) (* Full handshake: SS = ES *)
      let static_secret = exp(client_key_shares, Y) in     (* SS: (g^{X})^Y = g^{XY} *)
      let ephemeral_secret = exp(client_key_shares, Y) in  (* ES: (g^{X})^Y = g^{XY} *)
      let xss = HKDF_Extract(hkdf_zeros, static_secret) in
      let xes = HKDF_Extract(hkdf_zeros, ephemeral_secret) in

    (* Handshake traffic keys: client_write_key, server_write_key, 
                               client_write_iv, server_write_iv *)
      let handshake_context = H((client_hello, server_hello)) in

      let handshake_client_write_key = HKDF_Expand(
      	      xes, 
	      ((HKDF_LABEL_HANDSHAKE_KEY_EXPANSION, HKDF_LABEL_CLIENT_WRITE_KEY), handshake_context), 
	      hkdf_length_handshake_client_write_key) in

      let handshake_server_write_key = HKDF_Expand(
      	      xes, 
	      ((HKDF_LABEL_HANDSHAKE_KEY_EXPANSION, HKDF_LABEL_SERVER_WRITE_KEY), handshake_context), 
	      hkdf_length_handshake_server_write_key) in

      let handshake_client_write_iv = HKDF_Expand(
      	      xes, 
	      ((HKDF_LABEL_HANDSHAKE_KEY_EXPANSION, HKDF_LABEL_CLIENT_WRITE_IV), handshake_context), 
	      hkdf_length_handshake_client_write_IV) in

      let handshake_server_write_iv = HKDF_Expand(
      	      xes, 
	      ((HKDF_LABEL_HANDSHAKE_KEY_EXPANSION, HKDF_LABEL_SERVER_WRITE_IV), handshake_context), 
	      hkdf_length_handshake_server_write_IV) in

    (* EncryptedExtensions *)
      let encrypted_extensions = empty in 

    (* CertificateRequest: optional *)
      (* Omitted *)

    (* ServerConfiguration: optional *) 
      new configuration_id: bitstring;
      new expiration_date: bitstring;
      let static_key_share = server_key_share in 
      let server_configuration = (configuration_id, expiration_date, static_key_share, 
                                  early_data_type) in 

    (* Certificate: optional *)
      (* Main process *)

    (* CertificateVerify: optional *)
      let handshake_hashed_data = H((client_hello, server_hello, encrypted_extensions,
                                     server_configuration, server_certificate)) in 
      let server_certificate_verify = sign(handshake_hashed_data, skS) in 

    (* mSS, mES, master_secret, traffic_secret_0 *) 
      let handshake_hash = H((client_hello, server_hello, encrypted_extensions,
                              server_configuration, server_certificate, 
                              server_certificate_verify)) in
      let mss = HKDF_Expand(
      	      xss, 
	      (HKDF_LABAL_EXPANDED_STATIC_SECRET, handshake_hash), 
	      hkdf_length_mss) in
      let mes = HKDF_Expand(
      	      xes, 
	      (HKDF_LABEL_EXPANDED_EPHEMERAL_SECRET, handshake_hash), 
	      hkdf_length_mes) in
      let master_secret = HKDF_Extract(mss, mes) in 
      let traffic_secret_0 = HKDF_Expand(
      	      master_secret, 
	      (HKDF_LABEL_TRAFFIC_SECRET, handshake_hash), 
	      hkdf_length_traffic_secret) in

    (* Finished *) (* 1-RTT (Server) *)
      let server_finished_handshake_context = H((client_hello, server_hello, encrypted_extensions,
                                                 server_configuration, server_certificate, 
                                                 server_certificate_verify)) in
      let server_finished_key = HKDF_Expand(
      	      master_secret, 
	      (HKDF_SERVER_FINISHED, empty), 
	      hkdf_length_server_finished_key) in
      let server_finished = HMAC(server_finished_key, server_finished_handshake_context) in

    (* Encryption: encrypted_extensions, server_configuration, server_certificate, 
                   server_certificate_verify, server_finished *)
      (* AEAD: additional_data = empty *)
      let handshake_server_write_nonce_0 = xor(handshake_server_write_iv, 
                                               server_seq_num) in
      let enc_encrypted_extensions = AEAD_Encrypt(
      	      handshake_server_write_key, 
      	      handshake_server_write_nonce_0, 
	      (encrypted_extensions, record_type), 
	      empty) in 

      let handshake_server_write_nonce_1 = xor(handshake_server_write_iv, 
                                               inc(server_seq_num)) in
      let enc_server_configuration = AEAD_Encrypt(
      	      handshake_server_write_key, 
      	      handshake_server_write_nonce_1, 
	      (server_configuration, record_type), 
	      empty) in 

      let handshake_server_write_nonce_2 = xor(handshake_server_write_iv, 
                                               inc(inc(server_seq_num))) in
      let enc_server_certificate = AEAD_Encrypt(
      	      handshake_server_write_key, 
      	      handshake_server_write_nonce_2, 
	      (server_certificate, record_type), 
	      empty) in 

      let handshake_server_write_nonce_3 = xor(handshake_server_write_iv, 
                                               inc(inc(inc(server_seq_num)))) in
      let enc_server_certificate_verify = AEAD_Encrypt(
      	      handshake_server_write_key, 
	      handshake_server_write_nonce_3, 
	      (server_certificate_verify, record_type), 
	      empty) in 

      let handshake_server_write_nonce_4 = xor(handshake_server_write_iv, 
                                               inc(inc(inc(inc(server_seq_num))))) in
      let enc_server_finished = AEAD_Encrypt(
      	      handshake_server_write_key, 
	      handshake_server_write_nonce_4, 
	      (server_finished, record_type), 
	      empty) in 

    (* Event begin: authentication *)
      event beginClient(client_random, server_random, server_cipher_suite, xes, traffic_secret_0);

    (* Server output *)
      out(d, (server_hello, enc_encrypted_extensions, enc_server_configuration, 
              enc_server_certificate, enc_server_certificate_verify, enc_server_finished));

    (* Server input *)
      in(d, enc_client_finished: bitstring);

    (* Decryption: client_finished *)
      let handshake_client_write_nonce_0 = xor(handshake_client_write_iv, 
                                               client_seq_num) in
      let (client_finished:bitstring, =record_type) = AEAD_Decrypt(
      	      handshake_client_write_key, 
	      handshake_client_write_nonce_0, 
	      enc_client_finished, 
	      empty) in 

      let client_finished_handshake_context = H((client_hello, server_hello, encrypted_extensions,
                                                 server_configuration, server_certificate, 
                                                 server_certificate_verify, server_finished)) in
      let client_finished_key = HKDF_Expand(
      	      master_secret, 
	      (HKDF_CLIENT_FINISHED, empty), 
	      hkdf_length_client_finished_key) in
      if client_finished = HMAC(client_finished_key, client_finished_handshake_context) then

    (* Application traffic keys: client_write_key, server_write_key, 
                                 client_write_iv, server_write_iv *)
      let application_handshake_context = H((client_hello, server_hello, encrypted_extensions,
                                             server_configuration, server_certificate, 
                                             server_certificate_verify, server_finished)) in

      let application_client_write_key = HKDF_Expand(
      	      traffic_secret_0, 
	      ((HKDF_LABEL_APPLICATION_DATA_KEY_EXPANSION, HKDF_LABEL_CLIENT_WRITE_KEY), 
                application_handshake_context), 
	      hkdf_length_application_client_write_key) in

      let application_server_write_key = HKDF_Expand(
      	      traffic_secret_0, 
	      ((HKDF_LABEL_APPLICATION_DATA_KEY_EXPANSION, HKDF_LABEL_SERVER_WRITE_KEY), 
                application_handshake_context), 
	      hkdf_length_application_server_write_key) in

      let application_client_write_iv = HKDF_Expand(
      	      traffic_secret_0, 
	      ((HKDF_LABEL_APPLICATION_DATA_KEY_EXPANSION, HKDF_LABEL_CLIENT_WRITE_IV), 
                application_handshake_context), 
	      hkdf_length_application_client_write_IV) in

      let application_server_write_iv = HKDF_Expand(
      	      traffic_secret_0, 
	      ((HKDF_LABEL_APPLICATION_DATA_KEY_EXPANSION, HKDF_LABEL_SERVER_WRITE_IV), 
                application_handshake_context), 
	      hkdf_length_application_server_write_IV) in

    (* Application Data *) 
      let application_server_write_nonce_5 = xor(application_server_write_iv, 
                                                 inc(inc(inc(inc(inc(server_seq_num)))))) in 

      
    
    new ZeroRating_Data1a: bitstring;
    new ZeroRating_Data2a: bitstring;
    new ZeroRating_Data3a: bitstring;
    new ZeroRating_Data4a: bitstring;

    (* Step 4 *)
    
          
      out(d, AEAD_Encrypt(
                  application_server_write_key, 
                  application_server_write_nonce_5, 
                  (ZeroRating_Data1a, record_type), 
                  empty));


      out(d, AEAD_Encrypt(
                  application_server_write_key, 
                  application_server_write_nonce_5, 
                  (ZeroRating_Data2a, record_type), 
                  empty)); 

      out(d, AEAD_Encrypt(
                  application_server_write_key, 
                  application_server_write_nonce_5, 
                  (ZeroRating_Data3a, record_type), 
                  empty));
                  
      out(d, AEAD_Encrypt(
                  application_server_write_key, 
                  application_server_write_nonce_5, 
                  (ZeroRating_Data4a, record_type), 
                  empty)); 


    (* 3.2 DataPath Integrity CP server side  *)
    event beginResponseVerif_d(ZeroRating_Data1, ZeroRating_Data2, ZeroRating_Data3, ZeroRating_Data4);

    0.




    (******************************************************************)
    (******       User Client process      ******)


    (****  Client <----d ISP assistant  <----d  Server Agent  <----d CP Server   ****)


(******************************************************************)
(* Client process *)

let processClient(pkCA: bitstring)=
    (* Setup *)
      in(d, (client_version: bitstring, client_cipher_suites: bitstring, 
             legacy_compression_methods: bitstring));

    (* ClientHello + key_share *)
      new client_random: bitstring;
      new client_legacy_session_id: bitstring;
      new X: bitstring; 
      let client_key_shares = exp(g, X) in  (* g^X *)
      let client_hello = (client_version, client_random, client_legacy_session_id, 
                          client_cipher_suites, legacy_compression_methods, 
                          client_key_shares) in
    (* Client output *)
      out(d, client_hello);

    (* Client input *)
      in(d, (server_hello: bitstring, enc_encrypted_extensions: bitstring, 
             enc_server_configuration: bitstring, enc_server_certificate: bitstring, 
             enc_server_certificate_verify: bitstring, enc_server_finished: bitstring));
      let (server_version: bitstring, server_random: bitstring, 
           server_cipher_suite: bitstring, server_key_share: bitstring) = server_hello in 

      if server_version = client_version &&
         server_cipher_suite = client_cipher_suites then 

    (* SS, ES, xSS, xES *) (* Full handshake: SS = ES *)
      let static_secret = exp(server_key_share, X) in     (* SS: (g^{Y})^X = g^{XY} *)
      let ephemeral_secret = exp(server_key_share, X) in  (* ES: (g^{Y})^X = g^{XY} *)
      let xss = HKDF_Extract(hkdf_zeros, static_secret) in
      let xes = HKDF_Extract(hkdf_zeros, ephemeral_secret) in

    (* Handshake traffic keys: client_write_key, server_write_key, 
                               client_write_iv, server_write_iv *)
      let handshake_context = H((client_hello, server_hello)) in

      let handshake_client_write_key = HKDF_Expand(
      	      xes, 
	      ((HKDF_LABEL_HANDSHAKE_KEY_EXPANSION, HKDF_LABEL_CLIENT_WRITE_KEY), handshake_context), 
	      hkdf_length_handshake_client_write_key) in

      let handshake_server_write_key = HKDF_Expand(
      	      xes, 
	      ((HKDF_LABEL_HANDSHAKE_KEY_EXPANSION, HKDF_LABEL_SERVER_WRITE_KEY), handshake_context), 
	      hkdf_length_handshake_server_write_key) in

      let handshake_client_write_iv = HKDF_Expand(
      	      xes, 
	      ((HKDF_LABEL_HANDSHAKE_KEY_EXPANSION, HKDF_LABEL_CLIENT_WRITE_IV), handshake_context), 
	      hkdf_length_handshake_client_write_IV) in

      let handshake_server_write_iv = HKDF_Expand(
      	      xes, 
	      ((HKDF_LABEL_HANDSHAKE_KEY_EXPANSION, HKDF_LABEL_SERVER_WRITE_IV), handshake_context), 
	      hkdf_length_handshake_server_write_IV) in

    (* Decryption: encrypted_extensions, server_configuration, server_certificate, 
                   server_certificate_verify, server_finished *)
      (* AEAD: additional_data = empty *)
      let handshake_server_write_nonce_0 = xor(handshake_server_write_iv, 
                                               server_seq_num) in
      let (encrypted_extensions:bitstring, =record_type) = AEAD_Decrypt(
      	      handshake_server_write_key, 
      	      handshake_server_write_nonce_0, 
	      enc_encrypted_extensions, 
	      empty) in 

      let handshake_server_write_nonce_1 = xor(handshake_server_write_iv, 
                                               inc(server_seq_num)) in
      let (server_configuration:bitstring, =record_type) = AEAD_Decrypt(
      	      handshake_server_write_key, 
      	      handshake_server_write_nonce_1, 
	      enc_server_configuration, 
	      empty) in 

      let handshake_server_write_nonce_2 = xor(handshake_server_write_iv, 
                                               inc(inc(server_seq_num))) in
      let (server_certificate:bitstring, =record_type) = AEAD_Decrypt(
      	      handshake_server_write_key, 
      	      handshake_server_write_nonce_2, 
	      enc_server_certificate, 
	      empty) in 

      let handshake_server_write_nonce_3 = xor(handshake_server_write_iv, 
                                               inc(inc(inc(server_seq_num)))) in
      let (server_certificate_verify:bitstring, =record_type) = AEAD_Decrypt(
      	      handshake_server_write_key, 
	      handshake_server_write_nonce_3, 
	      enc_server_certificate_verify, 
	      empty) in 

      let handshake_server_write_nonce_4 = xor(handshake_server_write_iv, 
                                               inc(inc(inc(inc(server_seq_num))))) in
      let (server_finished:bitstring, =record_type) = AEAD_Decrypt(
      	      handshake_server_write_key, 
	      handshake_server_write_nonce_4, 
	      enc_server_finished, 
	      empty) in 

      if encrypted_extensions = empty then 

      let (=HostInfoCA, =HostInfoS, pkS: bitstring, signCA_pkS: bitstring) = server_certificate in 
      if verify(signCA_pkS, H((HostInfoCA, HostInfoS, pkS)), pkCA) = true then 

      let handshake_hashed_data = H((client_hello, server_hello, encrypted_extensions, 
                                     server_configuration, server_certificate)) in 
      if verify(server_certificate_verify, handshake_hashed_data, pkS) = true then 

    (* mSS, mES, master_secret, traffic_secret_0 *) 
      let handshake_hash = H((client_hello, server_hello, encrypted_extensions,
                              server_configuration, server_certificate, 
                              server_certificate_verify)) in
      let mss = HKDF_Expand(
      	      xss, 
	      (HKDF_LABAL_EXPANDED_STATIC_SECRET, handshake_hash), 
	      hkdf_length_mss) in
      let mes = HKDF_Expand(
      	      xes, 
	      (HKDF_LABEL_EXPANDED_EPHEMERAL_SECRET, handshake_hash), 
	      hkdf_length_mes) in
      let master_secret = HKDF_Extract(mss, mes) in 
      let traffic_secret_0 = HKDF_Expand(
      	      master_secret, 
	      (HKDF_LABEL_TRAFFIC_SECRET, handshake_hash), 
	      hkdf_length_traffic_secret) in

      let server_finished_handshake_context = H((client_hello, server_hello, encrypted_extensions,
                                                 server_configuration, server_certificate, 
                                                 server_certificate_verify)) in
      let server_finished_key = HKDF_Expand(
      	      master_secret, 
	      (HKDF_SERVER_FINISHED, empty), 
	      hkdf_length_server_finished_key) in
      if server_finished = HMAC(server_finished_key, server_finished_handshake_context) then



    (* Finished *) (* 1-RTT (Client) *)
      let client_finished_handshake_context = H((client_hello, server_hello, encrypted_extensions,
                                                 server_configuration, server_certificate, 
                                                 server_certificate_verify, server_finished)) in
      let client_finished_key = HKDF_Expand(
      	      master_secret, 
	      (HKDF_CLIENT_FINISHED, empty), 
	      hkdf_length_client_finished_key) in
      let client_finished = HMAC(client_finished_key, client_finished_handshake_context) in

    (* Encryption: client_finished *)
      let handshake_client_write_nonce_0 = xor(handshake_client_write_iv, 
                                               client_seq_num) in
      let enc_client_finished = AEAD_Encrypt(
      	      handshake_client_write_key, 
	      handshake_client_write_nonce_0, 
	      (client_finished, record_type), 
	      empty) in  

    (* Client output *)
      out(d, enc_client_finished);

    (* Event end: authentication *)
      event endClient(client_random, server_random, client_cipher_suites, xes, traffic_secret_0); 

    (* Application data traffic keys: client_write_key, server_write_key, 
                                      client_write_iv, server_write_iv *)
      let application_handshake_context = H((client_hello, server_hello, encrypted_extensions,
                                             server_configuration, server_certificate, 
                                             server_certificate_verify, server_finished)) in

      let application_client_write_key = HKDF_Expand(
      	      traffic_secret_0, 
	      ((HKDF_LABEL_APPLICATION_DATA_KEY_EXPANSION, HKDF_LABEL_CLIENT_WRITE_KEY), 
                application_handshake_context), 
	      hkdf_length_application_client_write_key) in

      let application_server_write_key = HKDF_Expand(
      	      traffic_secret_0, 
	      ((HKDF_LABEL_APPLICATION_DATA_KEY_EXPANSION, HKDF_LABEL_SERVER_WRITE_KEY), 
                application_handshake_context), 
	      hkdf_length_application_server_write_key) in

      let application_client_write_iv = HKDF_Expand(
      	      traffic_secret_0, 
	      ((HKDF_LABEL_APPLICATION_DATA_KEY_EXPANSION, HKDF_LABEL_CLIENT_WRITE_IV), 
                application_handshake_context), 
	      hkdf_length_application_client_write_IV) in

      let application_server_write_iv = HKDF_Expand(
      	      traffic_secret_0, 
	      ((HKDF_LABEL_APPLICATION_DATA_KEY_EXPANSION, HKDF_LABEL_SERVER_WRITE_IV), 
                application_handshake_context), 
	      hkdf_length_application_server_write_IV) in

    (* Application Data *) (* Secrecy *)
      let application_client_write_nonce_1 = xor(application_client_write_iv, 
                                                 inc(client_seq_num)) in 

       



    new ZeroRating_Data5: bitstring;
    new ZeroRating_Data6: bitstring;
    new ZeroRating_Data7: bitstring;
    new ZeroRating_Data8: bitstring;

    (* Step 4 *)
    
          
    out(d, AEAD_Encrypt(
                  application_client_write_key, 
                  application_client_write_nonce_1, 
                  (ZeroRating_Data5, record_type),
                  empty)); 
                  
    out(d, AEAD_Encrypt(
                  application_client_write_key, 
                  application_client_write_nonce_1, 
                  (ZeroRating_Data6, record_type), 
                  empty)); 
                  
    out(d, AEAD_Encrypt(
                  application_client_write_key, 
                  application_client_write_nonce_1, 
                  (ZeroRating_Data7, record_type), 
                  empty)); 
                  
     out(d, AEAD_Encrypt(
                  application_client_write_key, 
                  application_client_write_nonce_1, 
                  (ZeroRating_Data8, record_type),   
                  empty));            
                  
                                              

    (* 3.2 DataPath Integrity client side  *)
    event endResponseVerif_d(ZeroRating_Data1, ZeroRating_Data2, ZeroRating_Data3, ZeroRating_Data4);

    
    0.




(******************************************************************)
(* Certificate Authority (CA) process *)

let processCA(skCA: bitstring) =
      in(c, (HostInfoX: bitstring, pkX: bitstring));
      if HostInfoX <> HostInfoC_c && 
         HostInfoX <> HostInfoS_c &&
         HostInfoX <> HostInfoCA_c then 
      let signCA_pkX = sign(H((HostInfoCA_c, HostInfoX, pkX)), skCA) in 
      let X_certificate = (HostInfoCA_c, HostInfoX, pkX, signCA_pkX) in
      out(c, X_certificate);
      
      
      in(c, (HostInfoX_d: bitstring, pkX_d: bitstring));
      if HostInfoX_d <> HostInfoC && 
         HostInfoX_d <> HostInfoS &&
         HostInfoX_d <> HostInfoCA then 
      let signCA_pkX = sign(H((HostInfoCA, HostInfoX_d, pkX_d)), skCA) in 
      let X_certificate_d = (HostInfoCA, HostInfoX_d, pkX_d, signCA_pkX) in
      out(d, X_certificate_d);


(******************************************************************)
(* Main process *)

process
    (* Certificate Authority (CA) : skCA, pkCA *)
      new skCA: bitstring;
      let pkCA = pk(skCA) in
      out(c, pkCA);
    (* Server key : skS, pkS *)
      new skS: bitstring;
      let pkS = pk(skS) in 
    (* (Server) Certificate *)
      let signCA_pkS = sign(H((HostInfoCA_c, HostInfoS_c, pkS)), skCA) in 
      let server_certificate_c = (HostInfoCA_c, HostInfoS_c, pkS, signCA_pkS) in
      out(d, server_certificate_c);

    ((!processISP(pkCA)) | 
     (!processSA(skS, pkS, server_certificate_c, pkCA)) | 
     (!processServer(skS, pkS, server_certificate, pkCA)) |
     (!processClient(pkCA)) |
     (!processCA(skCA))
    )


(******************************************************************)
(* end of file *)
